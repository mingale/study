<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!--
		1. servlet-context.xml을 로딩하여 객체를 생성하도록, web.xml에 기술한 DispatcherServlet이 제어한다. 
		2. base-package 및 하위 경로에 있는 컨트롤들을 스캔하여 스프링 컨테이너가 객체 생성 및 관리 
		3. 단, 컨트롤 위에 어노테이션(@Controller, @Service, @Repository, @AutoWired, @Inject 등)을 붙인다.
	-->
	<!-- package 추가할 때 base-package 유지하기  -->
	<context:component-scan base-package="spring.mvc.bookstore" />
	
	<!-- MyBatis -->
	<!-- 3. ConnectionPool 접속 -->
	<beans:bean name="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/Oracle11g/bms" />  <!-- context.xml의 컨넥션풀 lookup -->
	    <beans:property name="resourceRef" value="true" />
	</beans:bean>	
	
	<!-- 2. ConnectionPool 호출, MyBatis 경로 지정 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<!-- ConnectionPool setter,호출 -->
		<beans:property name="dataSource" ref="dataSource"/>
		<!-- Mybatis.xml 경로 설정 -->	
		<beans:property name="mapperLocations" value="classpath:bookstore/mapper/*.xml" /><!-- classpath:폴더 위치 유동적으로 잡음 -->
	</beans:bean>
	
	<!-- ConnectionPool 접근할 수 있도록 지원 -->
	<!-- 1. DAO에서 사용할 ConnectionPool 접근 변수 -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory"/>	
	</beans:bean>	
	<!-- MyBatis -->
	
	<!-- ImageUpload -->
	<!-- Multipart를 받기 위한 Resolver 추가 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
</beans:beans>
